name: Create GitHub Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check Commit Message
        id: check-commit
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "::set-env name=CONTAINS_NEW_VERSION::$(echo $commit_message | grep -i 'new version release' || true)"
          echo "::set-env name=CONTAINS_ALPHA::$(echo $commit_message | grep -i 'alpha' || true)"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get Version from package.json
        id: get-version
        run: echo "::set-env name=PACKAGE_VERSION::$(node -e 'console.log(require("./package.json").version)')"

      - name: Create GitHub Release
        if: env.CONTAINS_NEW_VERSION == 'new version release'
        id: create-release
        run: |
          tag_name="${{ env.PACKAGE_VERSION }}"
          release_title="Release v${{ env.PACKAGE_VERSION }}"
          release_notes="This is the release notes for v${{ env.PACKAGE_VERSION }}"
          prerelease="${{ env.CONTAINS_ALPHA && 'true' || 'false' }}"

          echo "Creating GitHub release..."
          echo "Tag Name: $tag_name"
          echo "Release Title: $release_title"
          echo "Release Notes: $release_notes"
          echo "Is Pre-Release: $prerelease"

          # Create the release using the GitHub API
          response=$(curl -X POST "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'"$tag_name"'",
              "name": "'"$release_title"'",
              "body": "'"$release_notes"'",
              "draft": false,
              "prerelease": '"$prerelease"'
            }')

          echo "GitHub release created."
          echo "Response:"
          echo "$response"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Cleanup
        run: |
          unset CONTAINS_NEW_VERSION
          unset CONTAINS_ALPHA
          unset PACKAGE_VERSION
